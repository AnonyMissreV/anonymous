-module(intermediate).
-export([start_intermediate/0,init/1,handle_cast/2,stop_procs/2,code_change/3,handle_call/3,handle_info/2]).
-export([terminate/2]).
-behaviour(gen_server).
-include("defs.hrl").

  start_intermediate()->
   gen_server:start_link({local, intermediate}, intermediate, dict:new(), [])
  .
  
  init(Dict)->
  %%process_flag(trap_exit, true), 
  gen_server:cast( msg_controller ,{subscribe,intermediate, [{default_path, -1},{torrent_info, -1},{set_blocks, -1},{get_block, -1},{available_pieces, -1},{torrent_status, -1}]}),
  {ok,Dict}
    .
 
     % msgs from blackboard  
     handle_cast({notify,default_path,{Torrent_id,DefPath}},TorDict)->
                     
                         case dict:find(Torrent_id,TorDict) of
                           {ok, {null,null,DataRec}} -> 
                %%          io:format("had already rec"),                  
			    Pid = file_handler:start_main(Torrent_id,DataRec,DefPath),
                            link(Pid),
	                    Pid ! start ,
			    NewDic = dict:erase(Torrent_id,TorDict),
		%%		 io:format("had already a rec"),
				 {noreply , dict:store(Torrent_id,{Pid,DefPath,DataRec},NewDic)};
			   error  ->
                %%                 io:format("got path"),
                                 {noreply , dict:store(Torrent_id,{null,DefPath,null},TorDict)}
                         end
           ;     
     handle_cast({notify,torrent_info,{Torrent_id,DataRec}},TorDict)->
                         case  dict:find(Torrent_id,TorDict) of
                            {ok,{null,DefPath,null}} ->
                            Pid = file_handler:start_main(Torrent_id,DataRec,DefPath),
                            link(Pid),
	                    Pid ! start ,
			    NewDic = dict:erase(Torrent_id,TorDict),
		%%	    io:format("already had a path"),
		       	    {noreply , dict:store(Torrent_id,{Pid,DefPath,DataRec},NewDic)};
                            error ->
		%%	    io:format("got a rec"),

                            {noreply , dict:store(Torrent_id,{null,null,DataRec},TorDict)}	 
                         end
           ;
     handle_cast({notify,set_blocks,{Tid,BlockList}},TorDict)->
           io:format("intermediate got set_block ~n"),
           {ok, {Pid, _ ,_}} = dict:find(Tid,TorDict),
           Pid ! {set_blocks,BlockList} ,
           io:format(" set_block sent from intermediate ~n"),
           {noreply,TorDict}
           ;
     handle_cast({notify,get_block,{Tid,[Peid,Index,Begin,Length]}},TorDict)->
            io:format("intermediate got get_block ~n"),
            io:format("Tid: ~p~n", [Tid]),
            io:format("Peid: ~p~n", [Peid]),
            io:format("index: ~p~n", [Index]),
            io:format("Begin: ~p~n", [Begin]),
            io:format("Length: ~p~n", [Length]),
           {ok,{Pid,_,_}} = dict:find(Tid,TorDict),  
           Pid ! {get_block,[Peid,Index,Begin,Length]},
           io:format("intermediate sent get_block to pid: ~p ~n", [Pid]),
           {noreply,TorDict}  
           ;
     handle_cast({notify,torrent_status,{Tid,resumed}},TorDict)->
           {ok, {Pid,_,_}} = dict:find(Tid,TorDict),
           Pid ! resume ,
           {noreply,TorDict}
           ;
     handle_cast({notify,torrent_status,{Tid,stopped}},TorDict)->
           {ok, {Pid,_ , _ }} = dict:find(Tid,TorDict),
           Pid ! stop ,
           {noreply,dict:erase(Tid,TorDict)}
    	   ;
     handle_cast({notify,torrent_status,{Tid,paused}}, TorDict)->
           {ok, {Pid,_ , _ }} = dict:find(Tid,TorDict),
           Pid ! pause ,
           { noreply, TorDict}
    	   ;
     handle_cast({notify,torrent_status,{Tid,deleted}},TorDict)->
           io:format("הההההההההההההההההin deleted1"),
           {ok, {Pid,_, _}} = dict:find(Tid,TorDict),
           io:format("הההההההההההההההההin deleted2"),
           Pid ! stop,
           io:format("הההההההההההההההההin deleted3"),
           {noreply,dict:erase(Tid,TorDict)}    
           ;
      handle_cast({notify,torrent_status,{_Tid,opened}},TorDict)->
           {noreply,TorDict}    
           ;
     handle_cast(terminate,TorDict)->
           Keys = dict:fetch_keys(TorDict),
           stop_procs(Keys,TorDict),
           {stop,normal,TorDict}
           ;      

     % Msgs from main processes
     handle_cast({notify,block,{Tid,[Peid,Index,Begin,Block]}},TorDict)->
          % io:format("intermediate got block from file_handler"),
           msg_controller !  {notify,block,{Tid,[Peid,Index,Begin,Block]}} ,
          % io:format("block was sent to msg_controller "),
           {noreply,TorDict}  
            ;
     handle_cast({'EXIT',TerPid,normal},TorDict)->
           Keys = dict:fetch_keys(TorDict),
           NewDict = find_Tid(TerPid,Keys,TorDict),
           {noreply,NewDict}     
            ;
     handle_cast({'EXIT',TerPid,_},TorDict)->          
      %     Keys = dict:fetch_keys(TorDict),
      %     NewDict = find_rec(TerPid,Keys,TorDict),
           {noreply,TorDict} % later change to Newdict      
            ;
     handle_cast({notify,available_pieces,{Tid,IndexesList}},TorDict)->
      %     io:format("intermediate got available_pieces"),
      gen_server:cast( msg_controller , {notify,available_pieces,{Tid,IndexesList}}), 
           {noreply,TorDict} .

     terminate(_Reason, _TorDict) ->
           gen_server:cast(intermediate,terminate) .		
 
     stop_procs([Tid],TorDict)->
           {ok,{Pid,_,_}} = dict:find(Tid,TorDict),
           Pid ! stop ;
     stop_procs([Tid|Tail],TorDict)->
           {ok,{Pid,_,_}} = dict:find(Tid,TorDict),
           Pid ! stop , 
           stop_procs(Tail,TorDict).

     find_rec(Pid,[TorId|Tail],TorDict)->
           case dict:find(TorId,TorDict) of 
             {ok,{Pid,DefPath,TorRec}} ->
                            Pid2 = file_handler:start_main(TorId,TorRec,DefPath),
                            link(Pid2),
	                    case record_operation:is_multiple(TorRec) of 
				false ->
				    directory:set_wdir(DefPath);
                                true ->
				    ok
				      end,	      
			    NewDic = dict:erase(TorId,TorDict),
                            dict:store(TorId,{Pid2,DefPath,NewDic});
        _ ->

        find_rec(Pid,Tail,TorDict)
               end   .
    

    find_Tid(Pid,[TorId|Tail],TorDict)->
         case dict:find(TorId,TorDict) of
           {ok , {Pid,_,_}} ->
	      dict:erase(TorId,TorDict); 
	  _ ->
              find_Tid(Pid,Tail,TorDict)
      end .

  % just not to get warning !!!!
   code_change(_OldV,_State,_Extra)->
      ok .
   handle_call(_Request,_From,_state)->
      ok .
   handle_info(_Info, _State)->
      ok .
